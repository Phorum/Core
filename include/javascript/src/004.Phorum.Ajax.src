// ----------------------------------------------------------------------
// Ajax communication
// ----------------------------------------------------------------------

/**
 * @class Phorum.Ajax
 * @extends Object
 *
 * The Phorum.Ajax singleton provides tools for handling Phorum Ajax
 * communication. Ajax calls are done to the ajax.php script of the Phorum
 * system, which will handle the call and return the result.
 *
 * @singleton
 */
Phorum.Ajax =
{
    /**
     * @property url
     *
     * The URL that we use to access the Phorum Ajax layer script.
     * Note that the 'callback=?' part in this URL is a special placeholder
     * for jQuery's JSONP implementation (Phorum uses JSONP as the Ajax
     * call method).
     *
     * @var String
     */
    url: '<?php print phorum_api_url(PHORUM_AJAX_URL,"callback=?")?>',

    /**
     * <p>
     *   Execute an Ajax Phorum call.
     * </p>
     * <p>
     *   This method is also available through the alias
     *   {@link Phorum#call Phorum.call()}.
     * </p>
     *
     * @param {Object} req
     *   <p>
     *     The request object. This is object needs at least the property
     *     <b>"call"</b>. This property holds the name of the Ajax call that
     *     must be handled by the ajax.php script on the server.
     *   </p>
     *   <p>
     *     When the <b>"cache_id"</b> property is set, then the Phorum.Cache is
     *     used for caching the call result data. It is the task of the
     *     caller to make sure that the provided cache_id is
     *     <em>globally unique</em>.
     *   </p>
     *   <p>
     *     The <b>"onFailure"</b> property can be set for handling Ajax errors.
     *     Its value should be a function that handles the error that was
     *     returned by the Ajax call. This function will be called with the
     *     error message as its argument.
     *   </p>
     *   <p>
     *     The <b>"onSuccess"</b> property can be set for handling a successful
     *     Ajax call. Its value should be a function that handles the data
     *     that was returned by the Ajax call. This function will be called
     *     with two arguments:
     *     <ul>
     *       <li>the data that was returned by the Ajax call</li>
     *       <li>whether (true) or not (false) the result was returned
     *           from cache</li>
     *     </ul>
     *   </p>
     *   <p>
     *     All other properties will be sent to the ajax.php script as call
     *     arguments. What call arguments are available depends on the
     *     Phorum Ajax call that is called. Check the documentation of
     *     the call for details.
     *   </p>
     *
     *   <b>Example code:</b>
     *   <p><pre><code>
Phorum.Ajax.call({

   call: 'foo',
   arg1: 'bar',
   arg2: 'baz',
   cache_id: 'foo-bar-bar-id',

   onSuccess: function (data, from_cache) {
       alert('Call successful, data loaded ' +
             (from_cache ? ' from cache' : ' from server'));
   },

   onFailure: function (error) {
       alert('Call failed: ' + error);
   }
})
     *   </code></pre></p>
     */
    call: function (req)
    {
        // Check if a call was provided in the request data.
        if (! req.call) {
            Phorum.debug(
                'Phorum.Ajax.call() error: missing property ' +
                '"call" for the request object', 1, req
            );
            if (req.onFailure) {
                req.onFailure(
                    'Phorum.Ajax.call() error: missing property ' +
                    '"call" for the request object.',
                    -1, null
                );
            }
            return;
        }

        // If the req.cache_id property is set for the request, then check
        // if the data for the request is already available in the
        // local cache. If yes, then return the data immediately.
        if (req.cache_id) {
            var data = Phorum.Cache.get(req.cache_id);

            if (data !== null) {
                Phorum.debug(
                    'Phorum.Ajax.call calls onSuccess with cached data ' +
                    'for cache_id "' + req.cache_id + '"', 4, data
                );
                if (req.onSuccess) {
                    // true = data retrieved from cache.
                    req.onSuccess(data, true);
                }
                return;
            }
        }

        // Create a filtered argument list (without functions and control args).
        var args = {};
        for (var key in req) {
            if (typeof req[key] !== 'function' && key !== 'cache_id') {
                // Convert complex arguments to JSON, otherwise they will
                // not survive the translation to a JSONP request URL.
                if (typeof(req[key]) === 'object') {
                    args[key] = '$JSON$' + JSON.stringify(req[key]);
                } else {
                    args[key] = req[key];
                }
            }
        }

        // Notify the start of the request loading stage.
        Phorum.debug('Phorum.Ajax.call calls server with args', 5, args);
        if (req.onRequest) {
            req.onRequest(args);
        }

        $PJ.getJSON(Phorum.Ajax.url, args, function (answer)
        {
            Phorum.debug(
                'Phorum.Ajax.call receives answer from server', 5, answer
            );
            if (typeof answer.error === 'undefined')
            {
                // If the req.cache_id property is set, then cache the results.
                if (req.cache_id) {
                    Phorum.Cache.put(req.cache_id, answer);
                }

                // false = data not retrieved from cache.
                Phorum.debug(
                    'Phorum.Ajax.call calls onSuccess with', 4, answer
                );
                if (req.onSuccess) {
                    req.onSuccess(answer, false);
                }
            }
            else
            {
                Phorum.debug(
                    'Phorum.Ajax.call calls onFailure with', 4, answer.error
                );
                if (req.onFailure) {
                    req.onFailure(answer.error);
                }
            }
        });
    },

    /**
     * <p>
     *   Parse out javascript blocks from the data and eval them.
     * </p>
     * <p>
     *   This can be used to process javascript code that is embedded in
     *   dynamically retrieved blocks of HTML code. Adding this data to
     *   the page (e.g. by using document.write or innerHTML) would not
     *   evaluate the javascript code. Browsers only parse and evaluate
     *   javascript code that is retrieved at page load time.
     * </p>
     *
     * @param {String} data
     *   The data from which to parse the javascript blocks.
     */
    evalJavaScript: function (data)
    {
        var cursor = 0;
        var start  = 1;
        var end    = 1;

        while (cursor < data.length && start > 0 && end > 0) {
            start = data.indexOf('<script', cursor);
            end   = data.indexOf('</script', cursor);
            if (end > start && end > -1) {
                if (start > -1) {
                    var res = data.substring(start, end);
                    start = res.indexOf('>') + 1;
                    res = res.substring(start);
                    if (res.length !== 0) {
                        eval(res);
                    }
                }
                cursor = end + 1;
            }
        }
    }
};


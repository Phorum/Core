/**
 * @class Phorum.UI.NewFlags
 * @extends Object
 *
 * <p>
 *   The Phorum.UI.NewFlags singleton implements a framework for handling
 *   newflags in Phorum. It provides features to to handle "mark read" actions
 *   through Ajax communication to the server and to update the user interface
 *   after a "mark read" Ajax call has completed successfully.
 * </p>
 * <p>
 *   For templates to support handling mark new actions through Ajax, they have
 *   to include calls to {@link #markRead Phorum.UI.NewFlags.markRead()} or
 *   the shorter alias {@link Phorum#markRead Phorum.markRead()}.
 * </p>
 * <p>
 *   For updating the user interface after a successful call, a few built-in
 *   actions are provided. See {@link #updateUI updateUI()} for a description
 *   of these. If a template or module author needs support for a type of
 *   action that is not built-in, extra actions can be implemented by
 *   registering a callback through
 *   {@link #registerActionCallback registerActionCallback()}.
 * </p>
 *
 * @singleton
 */
Phorum.UI.NewFlags = {

    /**
     * @property className
     * @private
     */
    className: 'Phorum.UI.NewFlags',

    /**
     * <p>
     *   This is the callback registry. It holds global and action based
     *   callback functions that will be called when a
     *   {@link #markRead Phorum.UI.NewFlags.markRead()} call has been
     *   executed successfully.
     * </p>
     *
     * @private
     */
    callbacks: {
        global: [ ],
        action: { }
    },

    /**
     * <p>
     *   Register a global callback function that has to be called after every
     *   {@link #markRead markRead()} call has been completed successfully.
     * </p>
     * <p>
     *   The registered global callback functions will be called with two
     *   parameters, which identify what messages have been marked read:
     *   <div class="mdetail-params"><ul>
     *     <li><b>mode</b>: "vroots", "forums", "threads" or "messages"</li>
     *     <li><b>item_id</b>: the forum, thread or message id</li>
     *   </ul></div>
     * </p>
     * <p>
     *   <b>Example code:</b>
     * </p>
     * <p><pre><code>
Phorum.UI.NewFlags.registerCallback(function (mode, item_id) {
  alert("Mark read was successful for " + mode + ", id " + item_id);
});
     * </code></pre></p>
     *
     * @param {Function} callback
     *   The callback function to register.
     *
     * @param {Object} scope (optional)
     *   The scope to use for the callback.
     */
    registerCallback: function (callback, scope)
    {
        if (!(callback instanceof Function)) {
            throw this.className + '.registerCallback(): ' +
                  'the callback must be a function';
        }

        this.callbacks.global.push([callback, scope]);
    },

    /**
     * <p>
     *   Register a callback function for a specific action that has to be
     *   called after a {@link #markRead markRead()} call has been completed
     *   successfully.
     * </p>
     * <p>
     *   The registered action callback functions will be called with two
     *   parameters, which both identify the matching element:
     *   <div class="mdetail-params"><ul>
     *     <li><b>element</b>: the matching DOM-element</li>
     *     <li><b>$element</b>: the jQuery wrapper for the DOM-element</li>
     *   </ul></div>
     * </p>
     * <p>
     *   <b>Example code:</b>
     * </p>
     * <p><pre><code>
In javascript:

function handleCustomAction(elt, $elt) {
    $elt.css('color', 'green');
}

Phorum.UI.NewFlags.registerActionCallback('custom', handleCustomAction);

In template:

<span class="new-flag[custom,10,5,293]">
  this text will turn green when the message is read
</span>
     * </code></pre></p>
     *
     * @param {String} action (optional)
     *   The action for which to register the callback. The action is defined
     *   in the special new-flag[&lt;action&gt;,...] CSS class (see
     *   {@link #updateUI updateUI()} for more info).
     *
     * @param {Function} callback
     *   The callback function to register.
     *
     * @param {Object} scope (optional)
     *   The scope to use for the callback.
     */
    registerActionCallback: function (action, callback, scope)
    {
        if (!(callback instanceof Function)) {
            throw this.className + '.registerActionCallback(): ' +
                  'the callback must be a function';
        }
        if (this.callbacks.action[action] === undefined) {
            this.callbacks.action[action] = [ ];
        }
        this.callbacks.action[action].push([callback, scope]);
    },

    /**
     * <p>
     *   This method can be called from "mark read" links to handle marking
     *   vroots, forums, threads or messages read through Ajax calls. After the
     *   call has finished successfully, {@link #updateUI updateUI} will be
     *   called to update the user interface.
     * </p>
     * <p>
     *   This method is also available through the alias
     *   {@link Phorum#markRead Phorum.markRead()}.
     * </p>
     * <p>
     *   <b>Example code</b>
     * </p>
     * <p><pre><code>
&lt;a href="http://example.com/index.php?10,markread,0"
   onclick="return Phorum.UI.NewFlags.markRead('forums', 10)"&gt;
    Mark forum read
&lt;/a&gt;
     * </code></pre></p>
     *
     * @param {String} mode
     *     One of "vroots", "forums", "threads" or "messages".
     *
     * @param {Integer} item_id
     *     A vroot, forum, thread or message id (which one to use depends
     *     on the "mode" parameter).
     *
     * @param {Function} callback (optional)
     *     A callback function to call when the operation has been completed.
     *     This function will get true (mark read successful) or false
     *     (mark read failed) as its argument.
     *
     * @param {Object} scope (optional)
     *     The scope to use for the callback.
     *
     * @return boolean false
     *     This method always returns false, which makes it simple to cancel
     *     events (e.g. onclick="return Phorum.UI.NewFlags.markRead(...)")
     */
    markRead: function (mode, item_id, callback, scope)
    {
        // Request busy notification for the user.
        Phorum.UI.BusyMarker.increment();

        var request = {
            'call': 'markread',
            'onSuccess': function (data) {
                Phorum.UI.BusyMarker.decrement();
                Phorum.UI.NewFlags.updateUI(mode, item_id);
                if (callback instanceof Function) {
                    callback.call(scope || this, true);
                }
            },
            'onFailure': function (data) {
                Phorum.UI.BusyMarker.decrement();
                if (callback instanceof Function) {
                    callback.call(scope || this, false);
                }
            }
        };

        // Because the "mode" is dynamic ("vroots", "forums", "threads"
        // or "messages"), we have to assign this property of the request
        // like this.
        request[mode] = [ item_id ];

        Phorum.debug(
            this.className + ': call markread for mode = ' + mode + ', ' +
            'id = ' + item_id, 5
        );

        // Dispatch the Ajax Phorum call.
        Phorum.call(request);

        // So "return Phorum.UI.NewFlags.markRead(...)" can be used to cancel
        // an <a href> click.
        return false;
    },

    /**
     * <p>
     *   Update the user interface after marking messages as read.
     * </p>
     * <p>
     *   This method implements a few built-in actions for updating the
     *   user interface. If a template or module needs custom handling of
     *   mark read events, then the {@link #registerCallback registerCallback()}
     *   and {@link #registerActionCallback registerActionCallback()} methods
     *   can be used to implement custom functions.
     * </p>
     * <p>
     *   <b>Built-in UI update actions:</b>
     * </p>
     * <p>
     *   Below, we will describe the built-in actions that are provided by
     *   Phorum.UI.NewFlags. Linking one of these actions to a page element
     *   is done by assigning a CSS class that looks like:
     *   <pre><code>
new-flag[&lt;action&gt;,&lt;item&gt;]
     *   </code></pre>
     * </p>
     *   The &lt;item&gt; part in here references the item to which the new
     *   flag is linked. The format is:
     *   <pre><code>
&lt;forum id&gt;[, &lt;thread id&gt;[, &lt;message id&gt;]]

&lt &gt = mandatory
[ ] = optional

Examples:
10      = forum 10, for example on the index, where forums are listed
10,5    = forum 10, thread 5, for example on the list, where threads are listed
10,5,84 = forum 10, thread 5, message 85, for example on the read page
     *   </code></pre>
     * Using this notation, a mark read event for thread id 5 would match both
     * "10,5" and "10,5,84".
     * </p>
     * <p>
     *   The &lt;action&gt; part references the action that must be performed
     *   on the element. Below here, the built-in actions are described.
     * </p>
     * <div class="mdetail-params"><ul>
     *   <li>
     *     <b>Action: hide</b>:<br/>
     *     An element that will be hidden when the related item is
     *     marked read.<br/>
     *     In the default Phorum template, this is used for the
     *     red "new" text that is shown for new messages.<br/>
     *     <br/>
     *     Template code:
     *     <pre><code>
&lt;<i>element</i> class="new-flag[hide,&lt;item&gt;]"&gt;
  ... code to hide when marked read ...
&lt;/<i>element</i>&gt;

For example:

&lt;span class="new-flag[hide,10,5,84] new-flag"&gt;new&lt;/span&gt;
     *     </code></pre>
     *   </li>
     *   <li>
     *     <b>Action: css</b>:<br/>
     *     An element, from which the CSS class "new-flag" will be removed and
     *     to which the CSS class "read-flag" will be added when the related
     *     item is marked read.<br/>
     *     In the default Phorum template, this is for example used for the
     *     styling of the subject for new or updated threads on the list page.
     *     New subjects are displayed in a bold font.<br/>
     *     <br/>
     *     Template code:
     *     <pre><code>
&lt;<i>element</i> class="new-flag[css,&lt;item&gt;] new-flag"&gt;
   ... code to style ...
&lt;/<i>element</i>&gt;

For example:

&lt;a href="http://example.com/read.php?10,5,84#msg-84"
   class="new-flag[css,10,5] new-flag"&gt;Phorum rocks!&lt;/a&gt;
     *     </code></pre>
     *   </li>
     * </ul></div>
     *
     * @param {String} mode
     *     One of "vroots", "forums", "threads" or "messages".
     *
     * @param {Array} item_id
     *     The vroot, forum, thread or message id (which one to use depends
     *     on the "mode" parameter).
     */
    updateUI: function (mode, item_id)
    {
        var func = this.className + '.updateUI()';

        Phorum.debug(
            func + ': update UI for mode = ' + mode + ', ' +
            'id = ' + item_id, 5
        );

        // Build the regular expression for matching elements that have a
        // new flag action linked to them.
        var regexp = '^new-flag\\[(\\w+),';
        switch (mode) {
        case "vroots":
            regexp += '(\\d+)?(,\\d+){0,2}';
            break;
        case "forums":
            regexp += item_id + '(,\\d+){0,2}';
            break;
        case "threads":
            regexp += '\\d+,' + item_id + '(,\\d+)?';
            break;
        case "messages":
            regexp += '\\d+,\\d+,' + item_id;
            break;
        default:
            throw func + ': ' +
                  'processMatchingTags(): illegal mode: ' + mode;
        }
        regexp += '\\]';
        var re = new RegExp();
        re.compile(regexp);

        Phorum.debug(
            func + ': find elements that have a CSS class ' +
            'matching: ' + regexp, 10
        );

        // Find all elements that have "new-flag[" somewhere in the class name.
        // These are candidates for matching the complete
        // "new-flag[<action>,<item>]" class format.
        var me = this;
        $PJ("*[class*='new-flag[']").each(function ()
        {
            var $element = $PJ(this);
            var classes = $element.attr('class').split(' ');

            Phorum.debug(
                func + ': inspect element classes: ' + classes.join(', '), 10
            );

            // Elements might have more than one class name assigned to them.
            // Inspect each class name separately.
            for (var i = 0; i < classes.length; i++)
            {
                var match = re.exec(classes[i]);
                if (match)
                {
                    var action = match[1];

                    // Handle built-in action.
                    switch (action) {

                    case 'hide':
                        $element.fadeOut();
                        break;

                    case 'css':
                        $element.addClass('read-flag');
                        $element.removeClass('new-flag');
                        break;

                    }

                    // Handle action callback.
                    if (me.callbacks.action[action] !== undefined) {
                        var callbacks = me.callbacks.action[action];
                        for (var j = 0; j < callbacks.length; j++) {
                            var callback = callbacks[j][0];
                            var scope    = callbacks[j][1];
                            callback.call(scope || this, this, $element);
                        }
                    }
                }
            }
        });

        // Call all registered global callback functions
        // to handle custom mark read functionality.
        for (var i = 0; i < this.callbacks.global.length; i++) {
            var callback = this.callbacks[i][0];
            var scope    = this.callbacks[i][1];
            callback.call(scope || this, mode, item_id);
        }
    }
};

